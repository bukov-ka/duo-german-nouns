<../package.json>
```
{
  "name": "duo-german-nouns",
  "version": "1.0.0",
  "description": "A web app to practice German noun genders",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --mode development",
    "build": "webpack --mode production",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d dist"
  },
  "homepage": "https://bukov-ka.github.io/duo-german-nouns",
  "devDependencies": {
    "@types/node": "^22.5.0",
    "copy-webpack-plugin": "^12.0.2",
    "gh-pages": "^6.1.1",
    "html-webpack-plugin": "^5.6.0",
    "ts-loader": "^9.5.1",
    "typescript": "^5.5.4",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4"
  }
}

```
<../tsconfig.json>
```
{
    "compilerOptions": {
      "outDir": "./dist/",
      "sourceMap": true,
      "noImplicitAny": true,
      "module": "es6",
      "target": "es5",
      "jsx": "react",
      "allowJs": true,
      "moduleResolution": "node"
    }
  }
```
<../webpack.config.js>
```
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin");
const webpack = require("webpack");

module.exports = (env, argv) => ({
  entry: "./src/index.ts",
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: "ts-loader",
        exclude: /node_modules/,
      },
    ],
  },
  resolve: {
    extensions: [".tsx", ".ts", ".js"],
  },
  output: {
    filename: "bundle.js",
    path: path.resolve(__dirname, "dist"),
    clean: true,
    publicPath: argv.mode === "production" ? "/duo-german-nouns/" : "/",
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "public/index.html",
      filename: "index.html",
    }),
    new CopyPlugin({
      patterns: [
        {
          from: "public",
          to: "",
          globOptions: {
            ignore: ["**/index.html"],
          },
        },
        {
          from: "public/german_nouns.json",
          to: "german_nouns.json",
        },
      ],
    }),
    new webpack.DefinePlugin({
      "process.env.NODE_ENV": JSON.stringify(argv.mode),
    }),
  ],
  devServer: {
    static: {
      directory: path.join(__dirname, "public"),
    },
    compress: true,
    port: 4000,
  },
});

```
<../public\index.html>
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>German Noun Gender Practice</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #app {
            text-align: center;
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        #word {
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        button {
            font-size: 1.2rem;
            margin: 0.5rem;
            padding: 0.5rem 1rem;
            cursor: pointer;
        }
        #feedback {
            margin-top: 1rem;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div id="app">
        <div id="word"></div>
        <div id="buttons">
            <button id="der">der</button>
            <button id="die">die</button>
            <button id="das">das</button>
        </div>
        <div id="feedback"></div>
        <button id="continue" style="display: none;">Continue</button>
    </div>
</body>
</html>
```
<../src\app.ts>
```
import { Noun, loadNouns } from "./data";

export class App {
  private nouns: Noun[] = [];
  private currentNoun: Noun | null = null;

  constructor(
    private wordElement: HTMLElement,
    private derButton: HTMLButtonElement,
    private dieButton: HTMLButtonElement,
    private dasButton: HTMLButtonElement,
    private feedbackElement: HTMLElement,
    private continueButton: HTMLButtonElement
  ) {
    this.initialize();
  }

  private async initialize() {
    this.nouns = await loadNouns();
    this.setupEventListeners();
    this.nextWord();
  }

  private setupEventListeners() {
    this.derButton.addEventListener("click", () => this.checkAnswer("m"));
    this.dieButton.addEventListener("click", () => this.checkAnswer("f"));
    this.dasButton.addEventListener("click", () => this.checkAnswer("n"));
    this.continueButton.addEventListener("click", () => this.nextWord());
  }

  private nextWord() {
    this.currentNoun =
      this.nouns[Math.floor(Math.random() * this.nouns.length)];
    this.wordElement.textContent = this.currentNoun.word;
    this.feedbackElement.textContent = "";
    this.continueButton.style.display = "none";
    this.resetButtons();
  }

  private checkAnswer(answer: "n" | "m" | "f") {
    if (!this.currentNoun) return;

    const correct = answer === this.currentNoun.gender;
    const button = this.getButtonForGender(answer);
    const correctButton = this.getButtonForGender(this.currentNoun.gender);

    button.style.backgroundColor = correct ? "green" : "red";
    correctButton.style.backgroundColor = "green";

    this.feedbackElement.textContent = correct
      ? "Correct!"
      : "Incorrect. Try again!";
    this.continueButton.style.display = "inline-block";
  }

  private getButtonForGender(gender: "n" | "m" | "f"): HTMLButtonElement {
    switch (gender) {
      case "m":
        return this.derButton;
      case "f":
        return this.dieButton;
      case "n":
        return this.dasButton;
    }
  }

  private resetButtons() {
    [this.derButton, this.dieButton, this.dasButton].forEach((button) => {
      button.style.backgroundColor = "";
    });
  }
}

```
<../src\data.ts>
```
export interface Noun {
  word: string;
  gender: 'n' | 'm' | 'f';
  plural: string;
}

export async function loadNouns(): Promise<Noun[]> {
  const basePath = process.env.NODE_ENV === 'production' ? '/duo-german-nouns' : '';
  const response = await fetch(`${basePath}/german_nouns.json`);
  const data: [string, string, string][] = await response.json();
  return data.map(([word, gender, plural]) => ({
      word,
      gender: gender as 'n' | 'm' | 'f',
      plural
  })).filter(noun => ['n', 'm', 'f'].includes(noun.gender));
}
```
<../src\index.ts>
```
import { App } from "./app";

document.addEventListener("DOMContentLoaded", () => {
  const app = new App(
    document.getElementById("word")!,
    document.getElementById("der") as HTMLButtonElement,
    document.getElementById("die") as HTMLButtonElement,
    document.getElementById("das") as HTMLButtonElement,
    document.getElementById("feedback")!,
    document.getElementById("continue") as HTMLButtonElement
  );
});

```
